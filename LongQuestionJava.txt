Q1>>  .calculateSal
       Read the question carefully and follow the input and output format.

Karen got salary for this month and she spends 20% of her salary for food and 30% of her
salary for travel. If she takes care of other shifts she will get 2% of the salary per day. 
Given her salary and the number of shifts she handled. Calculate how much she can save in 
her pocket after spending all these?

Input and Output Format :
First line of input consists of an integer, salary. Next line correspond to the number of 
shifts. Output consist of an integer, which is saving.

1) Print "Salary too large" when salary is greater than 8000.
2) Print "Shifts too small" when the shift is less than 0.
3) Print "Salary too small" when the salary is less than 0.

Include a function named calculateSal(int salary, int shifts) whose return type is an integer,
 which is the saving.

Sample Input 1:
7000
5
Sample Output 1:
4200

Sample Input 2:
80000
Sample Output 2:
Salary too large
Sample Input 2:
6000
-1
Sample Output 2:
Shift too small

SOL>> public static void main(String[] args)
        {
                    int salary=0,shifts=0;
                    double savings=0;
                    Scanner scanner=new Scanner(System.in);
                    System.out.println("enter the salary and shifts");
                    salary = scanner.nextInt();
                    shifts = scanner.nextInt();
                    if(salary > 8000)
                    System.out.print("Salary too large ");
                    else if(shifts<0)
                    System.out.print ("Shifts too small\n");
                    else if(salary<0)
                    System.out.print ("Salary too small");
                    else
                    {
                                savings = (salary*0.5)+(salary*0.02*shifts);
                                System.out.printf ("%.0f",savings);
                    }
        }


----------------------------------------------------------------------------------------------------------------------------------------------------

Q2>> .Repeated Salary Count
     John is working as a clerk in an organization where N number of people are working.
     His boss has asked him to get the count of employees who get same salary. Help him to
     get the count of repeated salary.
     Include a function named countRepeaters that accepts 2 arguments and returns an int. 
     The first argument is the input array and the second argument is an int that corresponds
     to the size of the array. The function returns an int that corresponds to the number of 
     repeaters.
     If the size of the array is negative or if any of the array elements are negative, 
     print “Invalid Input” and terminate the program.
     Input and Output Format:
     Input consists of n+1 integers. The first integer corresponds to n, the number of elements
     in the array. The next 'n' integers correspond to the elements in the array.
     Output consists of an integer that corresponds to the number of repeaters.
     Assume that utmost one element in the array would repeat.
     Assume that the maximum number of elements in the array is 20.
 
Sample Input 1:
5
1000
2000
3500
2000
5000 
 
Sample Output 1:
2
 
Sample Input 2:
-5
 
Sample Output 2:
Invalid Input
 
Sample Input 3:
5
1000
-2000

Sample Output 3:
Invalid Input

SOL>>  

-----------------------------------------------------------------------------------------------------------------------------------------------------

Q3>> maximumSum
     Read the question carefully and follow the input and output format.

     Given an Integer array, find out sum of Even and odd Numbers individually and find the 
     maximum.

    Input and Output Format :
    First line of input consists of n, the number of elements. Next n lines correspond to the
    array elements. Output consist of maximum of odd and even sum.

1) Print "Invalid array size" when size of the array is a negative number and terminate the 
   program.
2) Print "Invalid input" when there is any negative numbers available in the input array and 
   terminate the program.

Include a function named maximumSum(int numbers[], int size) whose return type is an integer,.

Sample Input 1:
5
12
13
14
15
16

Sample Output 1:
42

Sample Input 2:
-13

Sample Output 2:
Invalid array size
--------------------------------------------------------------------------------------------------------------------

Q4>> Product of Digits
     In a car racing video game, the car is an object. You can drive the car, turn the car, 
     or stop the car when needed but you need to drive long. You will get money according to 
     the Km you have travelled. For example if you have travelled 123 km then the product of 
     the km (ie 1*2*3 = 6) would be the amount you win. Write a program to find the product of 
     the digits in the given input number.

     Include a function named productDigits that accepts an integer argument and returns an 
     integer that corresponds to the product of digits in the integer.
     The function returns -1 if the input number is negative or greater than 32767.
     If the function returns -1, print Invalid Input.
     Input and Output Format:
     Input consists of an integer.
     Output consists of an integer.
     Refer sample output for formatting specifications.
 Sample Input 1:
32
Sample Output 1:
6
 Sample Input 2:
-67
Sample Output 2:
Invalid Input

Sol>> import java.util.Scanner;
public class LQ_4_productDigit {
	public static int productDigit(int kmNo) {
		if(kmNo<0 || kmNo > 32767)
		{
			return -1;
		}else
			{
				int prod =1;
				while(kmNo>0) {
					int ren = kmNo%10;
					prod = prod*ren;
					kmNo = kmNo/10;
				}
				return prod;
			}
		
		}

	public static void main(String[] args) {
		// TODO Auto-generated method stub
		int kmNo;
		Scanner sc = new Scanner(System.in);
		System.out.println("Enter the  kilometer traveller: ");
		kmNo = sc.nextInt();
		productDigit(kmNo);
		int prod = productDigit(kmNo);
        if(prod == -1) {
        	System.out.println("Invalid Input");
        }else {
        	System.out.println(prod);
        }
}
}


---------------------------------------------------------------------------------------------------------------------------
Q5>> findCricketerId
     Read the question carefully and follow the input and output format.
     Given an input array first Index indicates the cricketer’s id and second index 
     indicates the score and so on……Find out the cricketer's id who scored more than
     given score

     Input and Output Format :
     First line of input consists of n, the number of elements. Next n lines correspond
     to the array elements.The next line of the input consists of an integer that 
     corresponds to the given score. Output consist of an integer array, which contains 
     cricketer's id who have scored more than the given score.

1) Print "Invalid array size" when size of the array is negative and terminate the program .
2) Print "Invalid input" when there is any negative numbers available in the input array 
   and terminate the program.
3) Print "Invalid score" when the score is negative.

Include a function named findCricketerId(int array[], int size, int score) whose return 
type is void.
The output array is stored in a global variable named cricketer.

Sample Input 1:
6
1
1000
5
2000
3
4000
1000

Sample Output 1:
5
3

Sample Input 2:
6
1
1000
5
3000
3
4000
-1000

Sample Output 2:
Invalid score

Sol>>  import java.util.Scanner;
public class LQ_ArrayCloningCricketfield {
	public static void findCricketId(int[] array, int size, int score) {
		int  i,j=0;
		int cricketer[] = new int[5];
		for(i = 1; i<size; i=i+2)
		{
			if(array[i]>score)
			{
				cricketer[j] = array[i-1];
				j++;
			}
		}
		for(i=0; i<j; i++)
		{
			System.out.println( cricketer[i]);
		}
	}

	public static void main(String[] args) {
		// TODO Auto-generated method stub
		int n,i ,j = 0, score;
		Scanner sc = new Scanner(System.in);
		System.out.println("Input the Array Size:  ");
		n = sc.nextInt();
		if(n<0)
		{
			System.out.println("Invalid Array Size");
			System.exit(0);
		} else
		{
			int a[] = new int[n];
			for(i=0; i<n; i++)
			{
				a[i] = sc.nextInt();
				if(a[i] < 0)
				{
					System.out.println("Invalid Input");
					System.exit(0);
				}
			}
			score = sc.nextInt();
			if(score<0)
			{
				System.out.printf("Invalid Score");
				System.exit(0);
			}
			findCricketId(a,n,score);
				
			}
		}

	}


-------------------------------------------------------------------------------------------------------------------------
Q6>>  Fahrenhiet to Centigrade
      Write a program to convert given temperature from Fahrenheit to Centigrade.
      Formula:
      C/5 = (F-32)/9
      C stands for Centigrade.
      F stands for Fahrenheit.
      Include a function named convertToCentigrade that accepts an integer argument and returns a float that corresponds to the centigrade equivalent.
      If the input is a negative number, print Invalid Input and terminate the program.
      Input and Output Format:
      Input consists of a single integer.
      Output consists of a floating point number that corresponds to the centigrade equivalent. The output is displayed correct to 2 decimal places.
      Sample Input 1:
      77
      Sample Output 1:
      25.00
      Sample Input 2:
      -2345
      Sample Output 2:
      Invalid Input

Sol>> public class Temperature {
public static float convertToCentigrade(int num) 
{
	float c = (num-32)/9*5;
    return c;
}
	public static void main(String[] args) {
		// TODO Auto-generated method stub
		System.out.println("Enter the Fahrenhiet temperature");
		float result = 0.0f ; 
		int f;
		 Scanner scanner=new Scanner(System.in);
		 f = scanner.nextInt();
		 if(f < 0) 
		 { 
		 System.out.print("Invalid Input");
		 System.exit(0); 
		 } else
		 { 
		 result=convertToCentigrade(f);
		 System.out.println("Centigrade temperature is ");
		 System.out.printf("%.2f",result);
		  }
	}

}

----------------------------------------------------------------------------------------------------------------
Q7>. highestFeedBack
     Read the question carefully and follow the input and output format.

    In a company there are some managers working on two different projects 
    (MetLife and Hardfort). When the feedback was taken their feedback was present 
    in both MetLife Feedback as well as Hardfort Feedback. Write a method to create
    a consolidated feedback for the managers for MetLife and HardForts. For those 
    working on both the projects the highest feedback is taken. In the 2 given 
    arrays, the First Index represents the Employee id and second one Represents 
    The Feed Back Score and so on....

Input and Output Format:
First line corresponds to n, the size of the array. The next n lines correspond to 
the elements of the first array. The next n lines correspond to the elements in the
second array. Output corresponds to the consolidated feedback score.

1) Print "Invalid array size" when size of the array is a negative number and 
   terminate the program
2) Print "Invalid input" when there is any negative number available in the input 
   array and terminate the program

Include a function named highestFeedBack(int metlife[],int hardfort[],int size) 
whose return type is void.
The output array is stored in a global variable named fedback.

Sample Input 1:
8
1
90
2
75
3
92
5
85
1
80
2
85
3
80
4
85
Sample Output 1:
1
90
2
85
3
92
5
85
4
85

Sample Input 2:
5
5
8
9
1
-6
Sample Output 2:
Invalid number

Sample Input 3:
-4
Sample Output 3:
Invalid array size

Sol>>  public class HighestFeebackCal {

	public static void main(String[] args) {
		// TODO Auto-generated method stub
		int size=0;
		
		Scanner scanner = new Scanner(System.in);
		System.out.println("enter the array size");
		size=scanner.nextInt();
		int[] metArray=new int[size];
		int[] hardArray=new int[size];
		if(size<0)
		{
			System.out.println("Invalid arraySize");
			System.exit(0);
		}
		System.out.println("enter the elements of the first array as employeeid and feedback");
		for(int i=0;i<size;i++)
		{
			metArray[i]=scanner.nextInt();
			if(metArray[i]<0)
			{
				System.out.println("Invalid Input");
			}
		}
		
		System.out.println("enter the elements of the second array as employeeid and feedback");
		for(int i=0;i<size;i++)
		{
			hardArray[i]=scanner.nextInt();
			
			if(hardArray[i]<0)
			{
				System.out.println("Invalid Input");
			}
		}
		
		
		highestFeedBack(metArray,hardArray,size);
		
	}
static void highestFeedBack(int[] metArray,int[] hardArray,int size){
        int res[]=new int[100];
        int count,k=0,count1,i,j;
        for(i=0;i<size;i=i+2)//i=2 0<8
        {
                    count=0;//0
                    for( j=0;j<size;j=j+2)// j= 2 0<8
                    {	
                                if(metArray[i]==hardArray[j])//1 == 2
                                {
                                            count=1;
                                            if(metArray[i+1]>hardArray[j+1])//80>90 false
                                            {
                                            	res[k]=metArray[i];//res[2]=
                                            	res[++k]=metArray[i+1];//res[3]
                                                        k++;
                                            }

else
                                            {
                                            	res[k]=metArray[i];//1 
                                            	res[++k]=hardArray[j+1];
                                                        k++;
                                            }
                                }
                    }
                    if(count==0)
                    {
                    	res[k]=metArray[i];
                    	res[++k]=metArray[i+1];
                                k++;
                    }
        }
for(i=0;i<size;i=i+2)
        {
                    count1=0;
                    for(j=0;j<size;j=j+2)
                    {
                                if(hardArray[i]==metArray[j])
                                {
                                            count1=1;
                                }
                    }
                    if(count1!=1)
                    {	
                    	res[k]=hardArray[i];
                    	res[++k]=hardArray[i+1];
                                k++;
                    }
        }
for(i=0;i<k;i++)
        {
                    System.out.println(res[i]);
        }
	}

		
	}

--------------------------------------------------------------------------------------------------------------------------------------
Q8>. Element Count
 
     Write a program to find the number of times a particular number occurs in 
     a given input array.
 
Include a function named findElementCount that accepts 3 arguments and returns 
an int. The first argument is the input array, the second argument is an int 
that corresponds to the size of the array and the third argument is the element 
to be searched for. The function returns an int that corresponds to the number 
of times the search element occurs in the array.
 
If the size of the array is negative or if any element in the array is negative,
 print “Invalid Input” and terminate the program.
 
Input and Output Format:
Input consists of n+2 integers. The first integer corresponds to n, the number 
of elements in the array. The next 'n' integers correspond to the elements in 
the array. The last integer corresponds to the element whose count needs to be 
found.
Output consists of an integer that corresponds to the number of times the search
element occurs in the array.
Assume that the maximum number of elements in the array is 20.
 
 
Sample Input 1:
8
2
1
3
8
6
8
10
8
8
 
Sample Output 1:
3
 
Sample Input 2:
-5
 
Sample Output 2:
Invalid Input

Sol:> import java.util.Scanner;
public class LQ_Element_Count {
	
		static int findElementCount(int[] elements, int size, int searchElement)
		{
			int count=0;
			for(int i=0;i<size;i++)
			{
				if(searchElement==elements[i])//12 == 12
				{
					count++;//2
				}
			}
			return count;
		}
		public static void main(String[] args) {
			
			int size,searchElement;
			Scanner scanner = new Scanner(System.in);
			System.out.println("Enter the array size");
			size=scanner.nextInt();
			int[] elements=new int[size];
			if(size<0) {
				System.out.println("Invalid array size");
				System.exit(0);
			
			}
			System.out.println("Enter the array elements");
			for(int i=0;i<size;i++)
			{
				elements[i]=scanner.nextInt();
				if(elements[i]<0)
				{
					System.out.println("Invalid input");
					System.exit(0);
				}
			}
			
			System.out.println("Enter the element to be searched for");
			searchElement=scanner.nextInt();
			
			int res=findElementCount(elements, size,searchElement );
			System.out.println(res);//2
		}
	}


---------------------------------------------------------------------------------------------------------------------------------------
Q9>.  primeIndexSum
      Read the question carefully and follow the input and output format.

Given an Integer array. Find the average of the numbers located on the Prime 
Indexes of the Array. Consider 0 index as 1 and 1 index is 2 and so on……

Hint :Consider 1 is not a prime number

Input and Output Format :
First line of input consists of n, the number of elements.Next n lines correspond 
to the array elements . Output consists of an Integer, the prime index sum.

1) Print "Invalid array size" when size of the array is a negative number.
2) Print "Invalid input" when there is any negative numbers available in the 
   input array.

Include a function named primeIndexSum(int array[], int size) whose return type 
is an integer,which is the sum.

Sample Input 1:
7
2
4
5
1
9
3
8

Sample Output 1:
6

Sample Input 2:
-7

Sample Output 2:
Invalid array size

Sol>. 

----------------------------------------------------------------------------------------------------------------------
Q.10>


